{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport shopActionTypes from './shop.types';\nimport { firestore } from '../../firebase/firebase.utils';\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"I am cool\");\n  const collectionRef = firestore.collection('collections');\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(err => dispatch(fetchCollectionsFailure(err.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(shopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/newowner/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","shopActionTypes","firestore","fetchCollectionsAsync","console","log","collectionRef","collection","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","dispatch","fetchCollectionsSuccess","catch","err","fetchCollectionsFailure","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAN;AAEA,QAAMC,aAAa,GAAGJ,SAAS,CAACK,UAAV,CAAqB,aAArB,CAAtB;AAEAD,EAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACnC,UAAMC,cAAc,GAAGC,+BAA+B,CAACF,QAAD,CAAtD;AACAG,IAAAA,QAAQ,CAACC,uBAAuB,CAACH,cAAD,CAAxB,CAAR;AACD,GAHD,EAGGI,KAHH,CAGSC,GAAG,IAAIH,QAAQ,CAACI,uBAAuB,CAACD,GAAG,CAACE,OAAL,CAAxB,CAHxB;AAID;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMnB,SAAS,CAACC,eAAe,CAACmB,uBAAjB,EAA0CjB,qBAA1C,CAAf;AACD","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\n\nimport shopActionTypes from './shop.types';\nimport { firestore } from '../../firebase/firebase.utils';\n\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"I am cool\");\n\n  const collectionRef = firestore.collection('collections'); \n\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(err => dispatch(fetchCollectionsFailure(err.message)))\n}\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(shopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n"]},"metadata":{},"sourceType":"module"}